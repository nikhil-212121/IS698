AWSTemplateFormatVersion: '2010-09-09'
Description: Full setup with VPC, EC2, S3, Lambda

Parameters:
  EnvType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Choose environment type

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    Description: Type of EC2 instance

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0e449927258d45bc4  # Change this if using a different region
    

Conditions:
  IsProd: !Equals [!Ref EnvType, prod]

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${EnvType}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucketri79216

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${EnvType}-instance"
    Condition: IsProd  # Only created if EnvType is 'prod'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("S3 Triggered Lambda!")
              return {"statusCode": 200, "body": json.dumps("Success")}

      

Outputs:
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref MyS3Bucket

  VPCID:
    Description: VPC ID
    Value: !Ref MyVPC

  EC2InstanceID:
    Description: EC2 Instance ID (only in prod)
    Value: !Ref MyEC2Instance
    Condition: IsProd
