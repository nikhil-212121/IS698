AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 + RDS + ALB + AutoScaling (with LaunchTemplate) + Lambda stack

Parameters:
  VpcId:
    Type: String
    Description: VPC ID where resources will be launched
  PublicSubnet1:
    Type: String
    Description: First public subnet ID
  PublicSubnet2:
    Type: String
    Description: Second public subnet ID
  PrivateSubnet1:
    Type: String
    Description: First private subnet ID
  PrivateSubnet2:
    Type: String
    Description: Second private subnet ID
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  DBName:
    Type: String
    Default: mydb
    Description: Initial database name
  DBUsername:
    Type: String
    Default: admin
    Description: Master DB username
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master DB password

Resources:

  ### Security Groups ###

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ### Load Balancer ###

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: scalable-app-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: scalable-app-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ### Launch Template & Auto Scaling ###

  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: web-launch-template
      LaunchTemplateData:
        ImageId: ami-0c94855ba95c71c99   # Amazon Linux 2 in us-east-1
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            echo "<h1>Welcome to Nikhil's Scalable App!</h1>" > /var/www/html/index.html

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  ### RDS MySQL ###

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private subnets for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  ### IAM Role & Lambda ###

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  S3LoggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3LoggerFunction
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${AWS::AccountId}-cfn-deploy-bucket"
        S3Key: lambda_function.zip

Outputs:
  LoadBalancerDNS:
    Description: URL of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  DBEndpoint:
    Description: Endpoint address of the RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address

